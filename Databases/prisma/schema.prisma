generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  role        String       // CLIENT, RESTAURANT_OWNER, DELIVERY_PERSON, ADMIN
  orders      Order[]      // Orders placed by user (clients)
  deliveries  Delivery[]   // Delivery records where user is the delivery person
  restaurants Restaurant[] // Restaurants owned by user
}

model Restaurant {
  id     Int     @id @default(autoincrement())
  userId Int
  user   User    @relation(fields: [userId], references: [id])
  name   String
  items  Items[] // Added missing relation field
  menu   Menu[]
  orders Order[] // Added missing relation field
}

model Menu {
  id           Int         @id @default(autoincrement())
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  name         String
  description  String
  price        Float
  imageUrl     String?     // Optional image URL for menu item
  items        MenuItem[]
  orderMenus   OrderMenu[]
}

model Items {
  id         Int         @id @default(autoincrement())
  itemId     String
  name       String
  restaurantId      Int
  restaurant         Restaurant        @relation(fields: [restaurantId], references: [id])
  price      Float
  status     String
  imageUrl   String
  orderItems OrderItem[]
  menuItems  MenuItem[]
}

model Order {
  id                Int         @id @default(autoincrement())
  userId            Int
  user              User        @relation(fields: [userId], references: [id])
  restaurantId      Int // Added missing field
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [id]) // Added missing relation
  deliveryPersonId  Int?        // Nullable field for delivery person assignment
  status            String
  timestamp         DateTime    @default(now())
  totalPrice        Float
  confirmationCode  String?     // Code for client to confirm delivery
  qrCode            String?     // QR code for restaurant pickup  pickedUpAt        DateTime?   // When delivery person picked up from restaurant
  deliveredAt       DateTime?   // When delivered to client
  orderItems        OrderItem[]
  orderMenus        OrderMenu[]
  delivery          Delivery?   // One-to-one: current active delivery
  payments          Payment[]
}

model OrderItem {
  orderId  Int
  order    Order @relation(fields: [orderId], references: [id])
  itemId   Int
  item     Items @relation(fields: [itemId], references: [id])
  quantity Int

  @@id([orderId, itemId])
}

model OrderMenu {
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])
  menuId  Int
  menu    Menu  @relation(fields: [menuId], references: [id])

  @@id([orderId, menuId])
}

model MenuItem {
  menuId Int
  menu   Menu  @relation(fields: [menuId], references: [id])
  itemId Int
  item   Items @relation(fields: [itemId], references: [id])

  @@id([menuId, itemId])
}

model Payment {
  id            Int    @id @default(autoincrement())
  orderId       Int
  order         Order  @relation(fields: [orderId], references: [id])
  method        String
  status        String
  transactionId String
}

model Delivery {
  id              Int       @id @default(autoincrement())
  orderId         Int       @unique // One delivery record per order
  order           Order     @relation(fields: [orderId], references: [id])
  deliveryPersonId Int      // User ID of delivery person
  deliveryPerson  User      @relation(fields: [deliveryPersonId], references: [id])
  status          String    // ASSIGNED, PICKED_UP, IN_TRANSIT, DELIVERED, CANCELLED
  assignedAt      DateTime  @default(now())
  pickedUpAt      DateTime?
  deliveredAt     DateTime?
  notes           String?   // Optional delivery notes
}